
// 흔하게 발생하는 오류 -> p.34 ~ 35
// 개발자 도구의 콘솔을 REPL (Read Evaluate Print Loop) 이라고도 한다.

// 자바스크립트는 인터프리터 언어이다. ( <-> 컴파일러 언어 ex. C, C++, JAVA)

// 프로그래밍 사고력 기르기 - 순서도, 의사 코드

// 순서도 - 두 겹의 사각형은 이벤트라고 한다.

// 자바스크립트에서는 세미 콜론을 붙이지 않아도 되나, 붙이는 것을 권장한다. 들여쓰기는 tab size

// VSC 에서의 주석 사용 - 한줄 주석 cmd + / 여러줄 주석 opt shift A 

// 자료형 data type
// 기본 자료형 - string, number, boolean, undefined                           
// 객체 자료형 (사용자 정의 자료형) - 배열형, null, 사용자 정의 객체(object)
// Symbol형

// 자바스크립트는 엄밀하게는 객체지향언어는 아니다. 하지만 클래스의 문법은 가지고 있다.
// -> 책에서는 프로토타입 기반의 객체지향 언어라고 한다. 뭔데

// 문자열은 홑따옴표, 쌍따옴표, 백틱을 사용할 수 있다.
// 정해진 것은 아니나 보통 HTML에서 주로 쌍따옴표를 많이 쓰므로 자바스크립트에서는 홑따옴표를 쓴다.
// 백틱 안에는 두 따옴표 둘 다 사용할 수 있다. 백틱을 사용한 문자열을 템플릿 문자열이라고 한다.
// ${변수명} 을 사용하며 리터럴을 표시할 수 있다.

// let x = 10;
// `${x}`; -> '10'

// \ : 이스케이프 문자열. \n, \t (length -> 1) 

// typeof. 

// '' "" `` 은 빈 문자열

// 문자열 연결은 + 연산자 사용. 숫자 + 문자열은 숫자를 문자열로 형변환하여 문자열이 됨

// 2진수 표기 : 0b11 -> 3;
// 8진수 표기 : 0o11 -> 9;
// 16진수 표기 : 0x11 -> 17;

// 문자열을 숫자로 변경 : parseInt(str, 진수); parseFloat(str, 진수)
// parseInt('123abc'); parseInt('1abc23'); parseInt('abc123');
// -> 123 / NaN / NaN
// parseFloat('123abc.45de'); -> 123 (number)
// 반환값 prompt(출력문자열), 반환값의 typeof -> string

// NaN : Not a Number, 숫자가 아님을 나타내는 자바스크립트 리터럴
// typeof NaN -> number.

// 산술 연산자
// + - * / % **


// Infinity
// 1/0 -1/0 
// typeof 1/0 -> NaN 
// typeof Infinity -> number

// '1' + 1 -> '11'
// '1' - 1 -> 0
// 이딴거는 안나옴 근데 문자열 + 숫자 -> 문자열 이런건 나온다 크크크

// + 연산자는 1) 산술 2) 문자열 겹합 3) 부호 연산의 역할을 할 수 있다.
// - 연산자는 1) 산술 2) 부호 연산의 역할이다. 
// + 를 제외한 산술 연산자 숫자 - 숫자가 아닌 문자열 -> 숫자 / 숫자 - 문자열 -> NaN

// 연산자 우선순위
// 그룹 연산자 ()
// 같은 레벨의 연산자의 경우 왼쪽이 더 높다.
// 예외, 대입 연산자는 오른쪽에 있는 것이 더 우선순위가 높다.

// boolean
// true / false 값을 가짐
// truthy / falsy 지원하여 1 / 0 으로 나타낼 수 있음
// 비교 연산이나 논리 연산의 결과
// 0, undefined, null, NaN -> falsy
// 위를 제외한 경우 -> truthy

// 연산 결과는 교재 자료 참고할 것

// NaN 과 NaN -> false
// null null -> true
// undefined undefined -> true

// 문자열의 비교
// 문자에 대한 값 : ascii 아스키코드 값
// charCodeAt();
// charAt();

// == 과 ===
// 값을 비교. === 는 데이터 타입까지 비교한다.
// 따라서 대부분의 경우, === 를 사용한다.

// 비교 연산자 
// > < >= <= == === != !==

// 논리 연산자
// && AND / || OR / ! NOT
// a && b / a 와 b 모두 true 이면 true;
// a||b / a 나 b 중 하나만이라도 true이면 true;

// 단항 연산자는 오른쪽에서 왼쪽으로 연산이 진행된다.